{"version":3,"sources":["context/postsContext.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.api.ts","components/PostDetails.tsx","components/UserSelector.tsx","api/users.api.ts","components/Home.tsx","api/posts.api.ts","App.tsx","index.tsx"],"names":["PostsContext","React","createContext","posts","errorMessage","setPosts","selectedPost","setSelectedPost","selectedUser","setSelectedUser","setErrorMessage","PostsProvider","children","useState","value","Provider","PostsList","useContext","className","map","post","id","title","type","cn","onClick","onOpenPostClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","postId","addComment","name","setName","email","setEmail","message","setMessage","hasError","setHasError","loading","setLoading","hasNameError","trim","hasEmailError","hasMessageError","onSubmit","event","preventDefault","normalizedName","normalizedEmail","normalizedMessage","newComment","createComment","createdComment","catch","finally","htmlFor","placeholder","onChange","target","disabled","PostDetails","comments","setComments","createNewComment","setCreateNewComment","onCommentDelete","commentId","prev","filter","comment","deleteComment","useEffect","length","href","UserSelector","users","setUsers","isDropdownActive","setIsDropdownActive","dropdown","createRef","hideDropdown","useCallback","current","contains","document","addEventListener","removeEventListener","ref","role","user","Home","userId","postsFromServer","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.21aa42e1.chunk.js","sourcesContent":["import React, { PropsWithChildren, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ninterface PostsProps {\n  posts: Post[];\n  errorMessage: string,\n  setPosts: (posts: Post[] | ((posts: Post[]) => Post[])) => void;\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null | ((post: Post | null) => Post)) => void;\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void,\n  setErrorMessage: (error: string | ((error: string) => string)) => void,\n}\n\nexport const PostsContext = React.createContext<PostsProps>({\n  posts: [],\n  errorMessage: '',\n  setPosts: () => {},\n  selectedPost: null,\n  setSelectedPost: () => {},\n  selectedUser: null,\n  setSelectedUser: () => {},\n  setErrorMessage: () => {},\n});\n\nexport const PostsProvider: React.FC<PropsWithChildren<{}>> = ({\n  children,\n}) => {\n  const [errorMessage, setErrorMessage] = useState('');\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const value = {\n    posts,\n    setPosts,\n    errorMessage,\n    selectedPost,\n    setSelectedPost,\n    selectedUser,\n    setSelectedUser,\n    setErrorMessage,\n  };\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Post } from '../types/Post';\nimport { PostsContext } from '../context/postsContext';\n\ninterface Props {\n  posts: Post[];\n}\n\nexport const PostsList: React.FC<Props> = ({ posts }) => {\n  const {\n    selectedPost,\n    setSelectedPost,\n  } = React.useContext(PostsContext);\n\n  function onOpenPostClick(post: Post) {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button', 'is-link', {\n                    'is-light': selectedPost?.id !== post.id,\n                  })}\n                  onClick={() => onOpenPostClick(post)}\n                >\n                  {selectedPost?.id !== post.id ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to load data');\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { createComment } from '../api/comments.api';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  postId: number,\n  setErrorMessage: (error: string) => void,\n  addComment: (comment: Comment) => void,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setErrorMessage,\n  addComment,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const hasNameError = hasError && !name.trim();\n  const hasEmailError = hasError && !email.trim();\n  const hasMessageError = hasError && !message.trim();\n\n  function reset() {\n    setName('');\n    setEmail('');\n    setMessage('');\n    setHasError(false);\n  }\n\n  function onSubmit(event: React.FormEvent) {\n    event.preventDefault();\n    const normalizedName = name.trim();\n    const normalizedEmail = email.trim();\n    const normalizedMessage = message.trim();\n\n    if (!normalizedName || !normalizedEmail || !normalizedMessage) {\n      setHasError(true);\n\n      return;\n    }\n\n    const newComment = {\n      id: 0,\n      name: normalizedName,\n      email: normalizedEmail,\n      body: normalizedMessage,\n      postId,\n    };\n\n    setLoading(true);\n\n    createComment(newComment)\n      .then((createdComment) => {\n        setMessage('');\n        setHasError(false);\n        addComment(createdComment);\n      })\n      .catch(() => {\n        setErrorMessage('Cannot create a new comment.');\n      })\n      .finally(() => setLoading(false));\n  }\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': hasNameError,\n            })}\n            value={name}\n            onChange={event => {\n              setName(event.target.value);\n              setHasError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasError && !name.trim() && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': hasEmailError,\n            })}\n            value={email}\n            onChange={event => {\n              setEmail(event.target.value);\n              setHasError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': hasMessageError,\n            })}\n            value={message}\n            onChange={event => {\n              setMessage(event.target.value);\n              setHasError(false);\n            }}\n          />\n        </div>\n\n        {hasMessageError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button', 'is-link', {\n              'is-loading': loading,\n            })}\n            disabled={loading}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getCommentsByPostId(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function createComment({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n}\n\nexport function deleteComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { deleteComment, getCommentsByPostId } from '../api/comments.api';\nimport { Comment } from '../types/Comment';\nimport { PostsContext } from '../context/postsContext';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [createNewComment, setCreateNewComment] = useState(false);\n  const { selectedPost } = useContext(PostsContext);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getCommentsByPostId(post.id)\n      .then(setComments)\n      .catch(() => {\n        setErrorMessage('Cannot load comments.');\n      })\n      .finally(() => setLoading(false));\n  }, [post]);\n\n  function onCommentDelete(commentId: number) {\n    setComments(prev => prev.filter(\n      comment => comment.id !== commentId,\n    ));\n\n    deleteComment(commentId)\n      .catch(() => {\n        setErrorMessage('Cannot delete a comment.');\n      });\n  }\n\n  useEffect(() => {\n    setCreateNewComment(false);\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading ? (\n            <Loader />\n          ) : (\n            <>\n              {errorMessage && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {comments.length === 0 && !errorMessage && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {comments.length > 0 && !errorMessage && (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n\n                  {comments.map(comment => (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a\n                          href={`mailto:${comment.email}`}\n                          data-cy=\"CommentAuthor\"\n                        >\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => onCommentDelete(comment.id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              )}\n\n              {!createNewComment && !errorMessage && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setCreateNewComment(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n\n              {createNewComment && (\n                <NewCommentForm\n                  postId={post.id}\n                  setErrorMessage={setErrorMessage}\n                  addComment={(newComment) => setComments(\n                    prev => [...prev, newComment],\n                  )}\n                />\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { createRef, useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { PostsContext } from '../context/postsContext';\nimport { User } from '../types/User';\nimport { Loader } from './Loader';\nimport { getUsers } from '../api/users.api';\n\nexport const UserSelector: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const {\n    selectedUser,\n    setSelectedUser,\n    setSelectedPost,\n    setErrorMessage,\n  } = React.useContext(PostsContext);\n  const dropdown = createRef<HTMLButtonElement>();\n\n  const hideDropdown = React.useCallback((event: MouseEvent) => {\n    if (!isDropdownActive) {\n      return;\n    }\n\n    if (!dropdown.current?.contains(event.target as Node)) {\n      setIsDropdownActive(false);\n    }\n  }, [isDropdownActive]);\n\n  useEffect(() => {\n    document.addEventListener('click', hideDropdown);\n\n    return () => {\n      document.removeEventListener('click', hideDropdown);\n    };\n  }, [isDropdownActive]);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getUsers()\n      .then(setUsers)\n      .catch(() => {\n        setErrorMessage('Cannot load users list.');\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          ref={dropdown}\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(!isDropdownActive)}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          { loading && <Loader />}\n\n          {!loading && users.length > 0 && users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onClick={() => {\n                setSelectedUser(user);\n                setIsDropdownActive(false);\n                setSelectedPost(null);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n\n          {!loading && users.length === 0 && (\n            <p className=\"dropdown-item\">There are no users</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport cn from 'classnames';\nimport { PostsList } from './PostsList';\nimport { PostDetails } from './PostDetails';\nimport { UserSelector } from './UserSelector';\nimport { Loader } from './Loader';\nimport { PostsContext } from '../context/postsContext';\nimport { getPostsByUserId } from '../api/posts.api';\n\nexport const Home: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const {\n    posts,\n    errorMessage,\n    selectedPost,\n    selectedUser,\n    setPosts,\n    setErrorMessage,\n  } = useContext(PostsContext);\n\n  useEffect(() => {\n    if (!selectedUser) {\n      return;\n    }\n\n    setErrorMessage('');\n    setLoading(true);\n\n    getPostsByUserId(selectedUser.id)\n      .then(postsFromServer => {\n        setPosts(() => postsFromServer);\n      })\n      .catch(() => {\n        setErrorMessage('Cannot load posts.');\n      })\n      .finally(() => setLoading(false));\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loading ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {errorMessage && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        {errorMessage}\n                      </div>\n                    )}\n\n                    {!errorMessage && posts.length === 0 && selectedUser && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n\n                    { posts.length > 0 && <PostsList posts={posts} />}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getPostsByUserId(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsProvider } from './context/postsContext';\nimport { Home } from './components/Home';\n\nexport const App: React.FC = () => (\n  <PostsProvider>\n    <Home />\n  </PostsProvider>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}