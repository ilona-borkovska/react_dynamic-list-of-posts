{"version":3,"sources":["utils/fetchClient.ts","context/postsContext.tsx","api/users.api.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/comments.api.ts","components/PostDetails.tsx","components/UserSelector.tsx","components/Home.tsx","api/posts.api.ts","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","PostsContext","React","createContext","posts","users","errorMessage","setPosts","selectedPost","setSelectedPost","selectedUser","setSelectedUser","setErrorMessage","PostsProvider","children","useState","setUsers","useEffect","catch","value","Provider","PostsList","useContext","className","map","post","id","title","type","cn","onClick","onOpenPostClick","Loader","NewCommentForm","postId","setComments","name","setName","email","setEmail","message","setMessage","hasError","setHasError","loading","setLoading","hasNameError","trim","hasEmailError","hasMessageError","onSubmit","event","preventDefault","normalizedName","normalizedEmail","normalizedMessage","newComment","createComment","createdComment","finally","htmlFor","placeholder","onChange","target","disabled","PostDetails","comments","createNewComment","setCreateNewComment","onCommentDelete","commentId","prev","filter","comment","deleteComment","length","href","UserSelector","isDropdownActive","setIsDropdownActive","dropdown","createRef","hideDropdown","current","contains","document","addEventListener","removeEventListener","ref","role","user","Home","userId","postsFromServer","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.76cda87e.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { getUsers } from '../api/users.api';\nimport { User } from '../types/User';\n\ninterface PostsProps {\n  posts: Post[];\n  users: User[];\n  errorMessage: string,\n  setPosts: (posts: Post[] | ((posts: Post[]) => Post[])) => void;\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null | ((post: Post | null) => Post)) => void;\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void,\n  setErrorMessage: (error: string | ((error: string) => string)) => void,\n}\n\nexport const PostsContext = React.createContext<PostsProps>({\n  posts: [],\n  users: [],\n  errorMessage: '',\n  setPosts: () => {},\n  selectedPost: null,\n  setSelectedPost: () => {},\n  selectedUser: null,\n  setSelectedUser: () => {},\n  setErrorMessage: () => {},\n});\n\nexport const PostsProvider: React.FC<PropsWithChildren<{}>> = ({\n  children,\n}) => {\n  const [errorMessage, setErrorMessage] = useState('');\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => {\n        setErrorMessage('Cannot load data.');\n      });\n  }, []);\n\n  const value = {\n    posts,\n    setPosts,\n    errorMessage,\n    selectedPost,\n    setSelectedPost,\n    users,\n    selectedUser,\n    setSelectedUser,\n    setErrorMessage,\n  };\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Post } from '../types/Post';\nimport { PostsContext } from '../context/postsContext';\n\ninterface Props {\n  posts: Post[];\n}\n\nexport const PostsList: React.FC<Props> = ({ posts }) => {\n  const {\n    selectedPost,\n    setSelectedPost,\n  } = React.useContext(PostsContext);\n\n  function onOpenPostClick(post: Post) {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button', 'is-link', {\n                    'is-light': selectedPost?.id !== post.id,\n                  })}\n                  onClick={() => onOpenPostClick(post)}\n                >\n                  {selectedPost?.id !== post.id ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { createComment } from '../api/comments.api';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  postId: number,\n  setErrorMessage: (error: string) => void,\n  setComments: (comment: Comment) => void,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setErrorMessage,\n  setComments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const hasNameError = hasError && !name.trim();\n  const hasEmailError = hasError && !email.trim();\n  const hasMessageError = hasError && !message.trim();\n\n  function reset() {\n    setName('');\n    setEmail('');\n    setMessage('');\n    setHasError(false);\n  }\n\n  function onSubmit(event: React.FormEvent) {\n    event.preventDefault();\n    const normalizedName = name.trim();\n    const normalizedEmail = email.trim();\n    const normalizedMessage = message.trim();\n\n    if (!normalizedName || !normalizedEmail || !normalizedMessage) {\n      setHasError(true);\n\n      return;\n    }\n\n    const newComment = {\n      id: 0,\n      name: normalizedName,\n      email: normalizedEmail,\n      body: normalizedMessage,\n      postId,\n    };\n\n    setLoading(true);\n\n    createComment(newComment)\n      .then((createdComment) => {\n        setMessage('');\n        setHasError(false);\n        setComments(createdComment);\n      })\n      .catch(() => {\n        setErrorMessage('Cannot create a new comment.');\n      })\n      .finally(() => setLoading(false));\n  }\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': hasNameError,\n            })}\n            value={name}\n            onChange={event => {\n              setName(event.target.value);\n              setHasError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasError && !name.trim() && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': hasEmailError,\n            })}\n            value={email}\n            onChange={event => {\n              setEmail(event.target.value);\n              setHasError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': hasMessageError,\n            })}\n            value={message}\n            onChange={event => {\n              setMessage(event.target.value);\n              setHasError(false);\n            }}\n          />\n        </div>\n\n        {hasMessageError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button', 'is-link', {\n              'is-loading': loading,\n            })}\n            disabled={loading}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getCommentsByPostId(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function createComment({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n}\n\nexport function deleteComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { deleteComment, getCommentsByPostId } from '../api/comments.api';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [createNewComment, setCreateNewComment] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getCommentsByPostId(post.id)\n      .then(setComments)\n      .catch(() => {\n        setErrorMessage('Cannot load comments.');\n      })\n      .finally(() => setLoading(false));\n  }, [post]);\n\n  function onCommentDelete(commentId: number) {\n    setComments(prev => prev.filter(\n      comment => comment.id !== commentId,\n    ));\n\n    deleteComment(commentId)\n      .catch(() => {\n        setErrorMessage('Cannot delete a comment.');\n      });\n  }\n\n  useEffect(() => {\n    setCreateNewComment(false);\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading ? (\n            <Loader />\n          ) : (\n            <>\n              {errorMessage && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {comments.length === 0 && !errorMessage && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {comments.length > 0 && !errorMessage && (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n\n                  {comments.map(comment => (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a\n                          href={`mailto:${comment.email}`}\n                          data-cy=\"CommentAuthor\"\n                        >\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => onCommentDelete(comment.id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              )}\n\n              {!createNewComment && !errorMessage && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setCreateNewComment(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n\n              {createNewComment && (\n                <NewCommentForm\n                  postId={post.id}\n                  setErrorMessage={setErrorMessage}\n                  setComments={(newComment) => setComments(\n                    prev => [...prev, newComment],\n                  )}\n                />\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { createRef, useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { PostsContext } from '../context/postsContext';\n\nexport const UserSelector: React.FC = () => {\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const {\n    users,\n    selectedUser,\n    setSelectedUser,\n    setSelectedPost,\n  } = React.useContext(PostsContext);\n  const dropdown = createRef<HTMLButtonElement>();\n\n  useEffect(() => {\n    function hideDropdown(event: MouseEvent) {\n      if (!isDropdownActive) {\n        return;\n      }\n\n      if (!dropdown.current?.contains(event.target as Node)) {\n        setIsDropdownActive(false);\n      }\n    }\n\n    document.addEventListener('click', hideDropdown);\n\n    return () => {\n      document.removeEventListener('click', hideDropdown);\n    };\n  }, [isDropdownActive]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          ref={dropdown}\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(true)}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.length > 0 && users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onClick={() => {\n                setSelectedUser(user);\n                setIsDropdownActive(false);\n                setSelectedPost(null);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport cn from 'classnames';\nimport { PostsList } from './PostsList';\nimport { PostDetails } from './PostDetails';\nimport { UserSelector } from './UserSelector';\nimport { Loader } from './Loader';\nimport { PostsContext } from '../context/postsContext';\nimport { getPostsByUserId } from '../api/posts.api';\n\nexport const Home: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const {\n    posts,\n    errorMessage,\n    selectedPost,\n    selectedUser,\n    setPosts,\n    setErrorMessage,\n  } = useContext(PostsContext);\n\n  useEffect(() => {\n    if (!selectedUser) {\n      return;\n    }\n\n    setErrorMessage('');\n    setLoading(true);\n\n    getPostsByUserId(selectedUser.id)\n      .then(postsFromServer => {\n        setPosts(() => postsFromServer);\n      })\n      .catch(() => {\n        setErrorMessage('Cannot load posts.');\n      })\n      .finally(() => setLoading(false));\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loading ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {errorMessage && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        {errorMessage}\n                      </div>\n                    )}\n\n                    {!errorMessage && posts.length === 0 && selectedUser && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n\n                    { posts.length > 0 && <PostsList posts={posts} />}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getPostsByUserId(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsProvider } from './context/postsContext';\nimport { Home } from './components/Home';\n\nexport const App: React.FC = () => (\n  <PostsProvider>\n    <Home />\n  </PostsProvider>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}